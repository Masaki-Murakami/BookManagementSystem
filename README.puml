# 書籍管理システム
図書館のように書籍をレンタルすることができるシステム

## モデル

### 要件モデル

```plantuml
left to right direction

actor 利用者
actor 管理者

rectangle 要件 {
  note right of 利用者 : 書籍を借りることができる
  note right of 利用者 : 書籍を返却することができる
  note right of 管理者 : 書籍を登録できる
}

```

### クラス図

```plantuml
package 書籍 <<Frame>> {
  '書籍
  class Book <<Entity>>{
  '   書籍ID
    - id : BookId
  '   タイトル
    - title : Title
  '   Isbn13
    - isbn13 : Isbn13
  '   BookStatus
    - status : BookStatus
  '   BookStatus
    - borrowerId : Optional<UserId>
  }

  '書籍ステータス
  enum BookStatus <<ValueObject>>{
  '   貸出可能
    - Lendable
  '   貸出中
    - InLending
  }
}

package ユーザー <<Frame>> {
  'ユーザー
  class User <<Entity>>{
  '   書籍ID
    - id : UserId
  '   タイトル
    - userName : UserName
  '   BookStatus
    - role : Role
  }

  class UserId <<ValueObject>> {
    - userId : UUID
  }

  'Role
  enum Role <<ValueObject>> {
  '   一般利用者
    - GeneralUser
  '   管理者
    - Adminstorator
  }
}

Book -down- BookStatus
Book -right- UserId
User -left- UserId
User -down- Role

```

### 状態遷移図

```plantuml
state "貸出可能（Lendable）" as Lendable
state "貸出中（InLending）" as InLending

[*] --> Lendable : 生成(create)
Lendable --> InLending : 貸出処理(lend)
InLending --> Lendable : 返却処理(giveBack)

```

## テストケース

### 書籍のテストケース

| 状態 | テストケース | 事後確認項目 |
|--|--|--|
|生成前| 書籍を生成できること | ・書籍IDが生成で指定した書籍IDであること <br> ・Isbn13が生成で指定したIsbn13であること <br> ・titleが生成で指定したtitleであること <br> ・statusがLendableであること <br> ・BorrowerIdが空であること |
|貸出可能状態| 貸出処理が可能であること | ・statusがInLendingであること <br> ・BorrowerIdが操作したユーザーのIDであること |
|貸出可能状態| 返却処理を実行した場合例外が発生すること | ・IllegalArgumentExceptionが発生すること <br> ・例外のメッセージが"bookStatus must be InLending"であること |
|貸出中状態| 返却処理が可能であること | ・statusがLendableであること <br> ・BorrowerIdが空であること |
|貸出中状態| 貸出処理を実行した場合例外が発生すること | ・IllegalArgumentExceptionが発生すること <br> ・例外のメッセージが"bookStatus must be Lendable"であること |
|貸出中状態| 貸出利用者以外が返却処理を実行した場合例外が発生すること | ・IllegalArgumentExceptionが発生すること <br> ・例外のメッセージが"borrowerId does not match"であること |
